// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ETUDIANT
  ADMIN
}

enum TypeNote {
  CC1
  CC2
  NORMALE
  RATTRAPAGE
}

enum TypeSemestre {
  SEMESTRE1
  SEMESTRE2
}

model User {
  id         String   @id @default(uuid())
  firstname  String
  lastname   String
  username   String   @unique
  email      String   @unique
  hash       String
  type       UserType @default(ETUDIANT)
  address    String?
  phone      String
  profile    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  parentId   String?
  parent     Parent?  @relation(fields: [parentId], references: [id])
  // Order      Order[]
  // Product    Product[]
  classeId   String?
  classe     Classes? @relation(fields: [classeId], references: [id])
  Note       Note[]

  @@map("user")
}

model Parent {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  phone       Int
  Address     String
  description String?
  profileP    String?
  // Product     Product[]
  User        User[]

  @@map("parent")
}

model Classes {
  id            String @id @default(uuid())
  nomClasse     String @unique
  niveau_classe String
  photo         String

  // moduleId String
  // module   Module @relation(fields: [moduleId], references: [id])
  User User[]
  Note Note[]

  @@map("classes")
}

// model Module {
//   id        String    @id @default(uuid())
//   nomModule String    @unique
//   matiereId String
//   matiere   Matiere   @relation(fields: [matiereId], references: [id])
//   Classes   Classes[]

//   @@map("module")
// }

model Note {
  id           String       @id @default(uuid())
  moyenne      Float
  credit       Int
  typeNote     TypeNote
  typeSemestre TypeSemestre
  total        BigInt?
  admis        Int?
  echec        Int?
  detailId     String
  note         DetailNote   @relation(fields: [detailId], references: [id])
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  classeId     String
  classe       Classes      @relation(fields: [classeId], references: [id])

  @@map("note")
}

model DetailNote {
  id      String @id @default(uuid())
  module  String @unique
  matiere String @unique
  notes   Float
  Note    Note[]

  @@map("detailnote")
}

model Resultat {
  id String @id @default(uuid())

  @@map("resultat")
}

model Communique {
  id          String @id @default(uuid())
  classe      String
  objet       String
  description String
  statut      String

  @@map("communique")
}
